{"ast":null,"code":"import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport queryString from 'query-string';\nimport { isAuth } from './auth';\nexport var createBlog = function createBlog(blog, token) {\n  var createBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    createBlogEndpoint = \"\".concat(API, \"/blog\");\n  } else if (isAuth() && isAuth().role === 0) {\n    createBlogEndpoint = \"\".concat(API, \"/user/blog\");\n  }\n\n  return fetch(createBlogEndpoint, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      Authorization: \"Bearer \".concat(token)\n    },\n    body: blog\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (error) {\n    return console.error(error);\n  });\n};\nexport var fetchBlogsWithCategoriesAndTags = function fetchBlogsWithCategoriesAndTags(skip, limit) {\n  var data = {\n    limit: limit,\n    skip: skip\n  };\n  return fetch(\"\".concat(API, \"/blogs-categories-tags\"), {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    // send skip and limit data from client side to backened\n    body: JSON.stringify(data)\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (error) {\n    return console.error(error);\n  });\n};\nexport var fetchBlog = function fetchBlog(slug) {\n  return fetch(\"\".concat(API, \"/blog/\").concat(slug), {\n    method: 'GET'\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (error) {\n    return console.error(error);\n  });\n};\nexport var fetchRelatedBlogs = function fetchRelatedBlogs(blog) {\n  return fetch(\"\".concat(API, \"/blogs/related\"), {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(blog)\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (error) {\n    return console.error(error);\n  });\n};\nexport var fetchAllBlogs = function fetchAllBlogs(username) {\n  var getBlogsEndpoint;\n\n  if (username) {\n    getBlogsEndpoint = \"\".concat(API, \"/\").concat(username, \"/blogs\");\n  } else {\n    getBlogsEndpoint = \"\".concat(API, \"/blogs\");\n  }\n\n  return fetch(getBlogsEndpoint, {\n    method: 'GET'\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (error) {\n    return console.error(error);\n  });\n};\nexport var updateBlog = function updateBlog(blog, token, slug) {\n  var updateBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    updateBlogEndpoint = \"\".concat(API, \"/blog/\").concat(slug);\n  } else if (isAuth() && isAuth().role === 0) {\n    updateBlogEndpoint = \"\".concat(API, \"/user/blog/\").concat(slug);\n  }\n\n  return fetch(updateBlogEndpoint, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      Authorization: \"Bearer \".concat(token)\n    },\n    body: blog\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (error) {\n    return console.error(error);\n  });\n};\nexport var removeBlog = function removeBlog(slug, token) {\n  var deleteBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    deleteBlogEndpoint = \"\".concat(API, \"/blog/\").concat(slug);\n  } else if (isAuth() && isAuth().role === 0) {\n    deleteBlogEndpoint = \"\".concat(API, \"/user/blog/\").concat(slug);\n  }\n\n  return fetch(deleteBlogEndpoint, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      Authorization: \"Bearer \".concat(token),\n      'Content-Type': 'application/json'\n    }\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (error) {\n    return console.error(error);\n  });\n};\nexport var blogSearch = function blogSearch(params) {\n  var query = queryString.stringify(params);\n  return fetch(\"\".concat(API, \"/blogs/search?\").concat(query), {\n    method: 'GET'\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (error) {\n    return console.error(error);\n  });\n};","map":{"version":3,"sources":["C:/blog-next-disqus/frontend/actions/blog.js"],"names":["fetch","API","queryString","isAuth","createBlog","blog","token","createBlogEndpoint","role","method","headers","Accept","Authorization","body","then","response","json","error","console","fetchBlogsWithCategoriesAndTags","skip","limit","data","JSON","stringify","fetchBlog","slug","fetchRelatedBlogs","fetchAllBlogs","username","getBlogsEndpoint","updateBlog","updateBlogEndpoint","removeBlog","deleteBlogEndpoint","blogSearch","params","query"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport queryString from 'query-string';\nimport { isAuth } from './auth';\n\nexport const createBlog = (blog, token) => {\n  let createBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    createBlogEndpoint = `${API}/blog`;\n  } else if (isAuth() && isAuth().role === 0) {\n    createBlogEndpoint = `${API}/user/blog`;\n  }\n\n  return fetch(createBlogEndpoint, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: blog,\n  })\n    .then((response) => response.json())\n    .catch((error) => console.error(error));\n};\n\nexport const fetchBlogsWithCategoriesAndTags = (skip, limit) => {\n  const data = {\n    limit,\n    skip,\n  };\n\n  return fetch(`${API}/blogs-categories-tags`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    // send skip and limit data from client side to backened\n    body: JSON.stringify(data),\n  })\n    .then((response) => response.json())\n    .catch((error) => console.error(error));\n};\n\nexport const fetchBlog = (slug) => {\n  return fetch(`${API}/blog/${slug}`, {\n    method: 'GET',\n  })\n    .then((response) => response.json())\n    .catch((error) => console.error(error));\n};\n\nexport const fetchRelatedBlogs = (blog) => {\n  return fetch(`${API}/blogs/related`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(blog),\n  })\n    .then((response) => response.json())\n    .catch((error) => console.error(error));\n};\n\nexport const fetchAllBlogs = (username) => {\n  let getBlogsEndpoint;\n\n  if (username) {\n    getBlogsEndpoint = `${API}/${username}/blogs`;\n  } else {\n    getBlogsEndpoint = `${API}/blogs`;\n  }\n\n  return fetch(getBlogsEndpoint, {\n    method: 'GET',\n  })\n    .then((response) => response.json())\n    .catch((error) => console.error(error));\n};\n\nexport const updateBlog = (blog, token, slug) => {\n  let updateBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    updateBlogEndpoint = `${API}/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    updateBlogEndpoint = `${API}/user/blog/${slug}`;\n  }\n  return fetch(updateBlogEndpoint, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: blog,\n  })\n    .then((response) => response.json())\n    .catch((error) => console.error(error));\n};\n\nexport const removeBlog = (slug, token) => {\n  let deleteBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    deleteBlogEndpoint = `${API}/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    deleteBlogEndpoint = `${API}/user/blog/${slug}`;\n  }\n\n  return fetch(deleteBlogEndpoint, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n  })\n    .then((response) => response.json())\n    .catch((error) => console.error(error));\n};\n\nexport const blogSearch = (params) => {\n  const query = queryString.stringify(params);\n\n  return fetch(`${API}/blogs/search?${query}`, {\n    method: 'GET',\n  })\n    .then((response) => response.json())\n    .catch((error) => console.error(error));\n};\n"]},"metadata":{},"sourceType":"module"}