{"ast":null,"code":"import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport queryString from 'query-string';\nimport { isAuth } from './auth';\nexport const createBlog = (blog, token) => {\n  let createBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    createBlogEndpoint = `${API}/blog`;\n  } else if (isAuth() && isAuth().role === 0) {\n    createBlogEndpoint = `${API}/user/blog`;\n  }\n\n  return fetch(createBlogEndpoint, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  }).then(response => response.json()).catch(error => console.error(error));\n};\nexport const fetchBlogsWithCategoriesAndTags = (skip, limit) => {\n  const data = {\n    limit,\n    skip\n  };\n  return fetch(`${API}/blogs-categories-tags`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    // send skip and limit data from client side to backened\n    body: JSON.stringify(data)\n  }).then(response => response.json()).catch(error => console.error(error));\n};\nexport const fetchBlog = slug => {\n  return fetch(`${API}/blog/${slug}`, {\n    method: 'GET'\n  }).then(response => response.json()).catch(error => console.error(error));\n};\nexport const fetchRelatedBlogs = blog => {\n  return fetch(`${API}/blogs/related`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(blog)\n  }).then(response => response.json()).catch(error => console.error(error));\n};\nexport const fetchAllBlogs = username => {\n  let getBlogsEndpoint;\n\n  if (username) {\n    getBlogsEndpoint = `${API}/${username}/blogs`;\n  } else {\n    getBlogsEndpoint = `${API}/blogs`;\n  }\n\n  return fetch(getBlogsEndpoint, {\n    method: 'GET'\n  }).then(response => response.json()).catch(error => console.error(error));\n};\nexport const updateBlog = (blog, token, slug) => {\n  let updateBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    updateBlogEndpoint = `${API}/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    updateBlogEndpoint = `${API}/user/blog/${slug}`;\n  }\n\n  return fetch(updateBlogEndpoint, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  }).then(response => response.json()).catch(error => console.error(error));\n};\nexport const removeBlog = (slug, token) => {\n  let deleteBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    deleteBlogEndpoint = `${API}/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    deleteBlogEndpoint = `${API}/user/blog/${slug}`;\n  }\n\n  return fetch(deleteBlogEndpoint, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    }\n  }).then(response => response.json()).catch(error => console.error(error));\n};\nexport const blogSearch = params => {\n  const query = queryString.stringify(params);\n  return fetch(`${API}/blogs/search?${query}`, {\n    method: 'GET'\n  }).then(response => response.json()).catch(error => console.error(error));\n};","map":{"version":3,"sources":["C:/blog-next-disqus/frontend/actions/blog.js"],"names":["fetch","API","queryString","isAuth","createBlog","blog","token","createBlogEndpoint","role","method","headers","Accept","Authorization","body","then","response","json","catch","error","console","fetchBlogsWithCategoriesAndTags","skip","limit","data","JSON","stringify","fetchBlog","slug","fetchRelatedBlogs","fetchAllBlogs","username","getBlogsEndpoint","updateBlog","updateBlogEndpoint","removeBlog","deleteBlogEndpoint","blogSearch","params","query"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport queryString from 'query-string';\nimport { isAuth } from './auth';\n\nexport const createBlog = (blog, token) => {\n  let createBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    createBlogEndpoint = `${API}/blog`;\n  } else if (isAuth() && isAuth().role === 0) {\n    createBlogEndpoint = `${API}/user/blog`;\n  }\n\n  return fetch(createBlogEndpoint, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: blog,\n  })\n    .then((response) => response.json())\n    .catch((error) => console.error(error));\n};\n\nexport const fetchBlogsWithCategoriesAndTags = (skip, limit) => {\n  const data = {\n    limit,\n    skip,\n  };\n\n  return fetch(`${API}/blogs-categories-tags`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    // send skip and limit data from client side to backened\n    body: JSON.stringify(data),\n  })\n    .then((response) => response.json())\n    .catch((error) => console.error(error));\n};\n\nexport const fetchBlog = (slug) => {\n  return fetch(`${API}/blog/${slug}`, {\n    method: 'GET',\n  })\n    .then((response) => response.json())\n    .catch((error) => console.error(error));\n};\n\nexport const fetchRelatedBlogs = (blog) => {\n  return fetch(`${API}/blogs/related`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(blog),\n  })\n    .then((response) => response.json())\n    .catch((error) => console.error(error));\n};\n\nexport const fetchAllBlogs = (username) => {\n  let getBlogsEndpoint;\n\n  if (username) {\n    getBlogsEndpoint = `${API}/${username}/blogs`;\n  } else {\n    getBlogsEndpoint = `${API}/blogs`;\n  }\n\n  return fetch(getBlogsEndpoint, {\n    method: 'GET',\n  })\n    .then((response) => response.json())\n    .catch((error) => console.error(error));\n};\n\nexport const updateBlog = (blog, token, slug) => {\n  let updateBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    updateBlogEndpoint = `${API}/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    updateBlogEndpoint = `${API}/user/blog/${slug}`;\n  }\n  return fetch(updateBlogEndpoint, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: blog,\n  })\n    .then((response) => response.json())\n    .catch((error) => console.error(error));\n};\n\nexport const removeBlog = (slug, token) => {\n  let deleteBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    deleteBlogEndpoint = `${API}/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    deleteBlogEndpoint = `${API}/user/blog/${slug}`;\n  }\n\n  return fetch(deleteBlogEndpoint, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n  })\n    .then((response) => response.json())\n    .catch((error) => console.error(error));\n};\n\nexport const blogSearch = (params) => {\n  const query = queryString.stringify(params);\n\n  return fetch(`${API}/blogs/search?${query}`, {\n    method: 'GET',\n  })\n    .then((response) => response.json())\n    .catch((error) => console.error(error));\n};\n"]},"metadata":{},"sourceType":"module"}