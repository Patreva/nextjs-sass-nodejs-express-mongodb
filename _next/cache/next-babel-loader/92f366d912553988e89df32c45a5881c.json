{"ast":null,"code":"import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport cookie from 'js-cookie';\nexport const preSignup = user => {\n  return fetch(`${API}/pre-signup`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  }).then(response => response.json()).catch(error => console.error(error));\n};\nexport const signup = user => {\n  return fetch(`${API}/signup`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  }).then(response => response.json()).catch(error => console.error(error));\n};\nexport const signin = user => {\n  return fetch(`${API}/signin`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  }).then(response => response.json()).catch(error => console.error(error));\n};\nexport const signout = next => {\n  removeCookie('token');\n  removeLocalStorage('user');\n  next();\n  return fetch(`${API}/signout`, {\n    method: 'GET'\n  }).then(response => console.log('Signout successful')).catch(error => console.error(error));\n}; // set cookie\n\nexport const setCookie = (key, value) => {\n  if (false) {\n    cookie.set(key, value, {\n      expires: 1\n    });\n  }\n};\nexport const removeCookie = key => {\n  if (false) {\n    cookie.remove(key, {\n      expires: 1\n    });\n  }\n}; // get cookie\n\nexport const getCookie = key => {\n  if (false) {\n    return cookie.get(key);\n  }\n}; // local storage\n\nexport const setLocalStorage = (key, value) => {\n  if (false) {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n};\nexport const removeLocalStorage = key => {\n  if (false) {\n    localStorage.removeItem(key);\n  }\n}; // authenticate user by passing data to cookie and localstorage\n\nexport const authenticate = (data, next) => {\n  // set the cookie\n  setCookie('token', data.token); // save data to localstorage\n\n  setLocalStorage('user', data.user);\n  next();\n};\nexport const isAuth = () => {\n  if (false) {\n    // if there is a token in the cookie, then we have a user\n    const cookieChecked = getCookie('token'); // if there is a cookie, get the 'user' item from the local storage\n\n    if (cookieChecked) {\n      if (localStorage.getItem('user')) {\n        return JSON.parse(localStorage.getItem('user'));\n      } else {\n        return false;\n      }\n    }\n  }\n};\nexport const updateUser = (user, next) => {\n  if (false) {\n    if (localStorage.getItem('user')) {\n      let auth = JSON.parse(localStorage.getItem('user'));\n      auth = user;\n      localStorage.setItem('user', JSON.stringify(auth));\n      next();\n    }\n  }\n};\nexport const forgotPassword = email => {\n  return fetch(`${API}/forgot-password`, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(email)\n  }).then(response => response.json()).catch(error => console.error(error));\n};\nexport const resetPassword = resetInfo => {\n  return fetch(`${API}/reset-password`, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(resetInfo)\n  }).then(response => response.json()).catch(error => console.error(error));\n};\nexport const loginWithGoogle = user => {\n  return fetch(`${API}/google-login`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  }).then(response => response.json()).catch(error => console.error(error));\n};","map":{"version":3,"sources":["C:/blog-next-disqus/frontend/actions/auth.js"],"names":["fetch","API","cookie","preSignup","user","method","headers","Accept","body","JSON","stringify","then","response","json","catch","error","console","signup","signin","signout","next","removeCookie","removeLocalStorage","log","setCookie","key","value","set","expires","remove","getCookie","get","setLocalStorage","localStorage","setItem","removeItem","authenticate","data","token","isAuth","cookieChecked","getItem","parse","updateUser","auth","forgotPassword","email","resetPassword","resetInfo","loginWithGoogle"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,SAASC,GAAT,QAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,OAAO,MAAMC,SAAS,GAAGC,IAAI,IAAI;AAC/B,SAAOJ,KAAK,CAAE,GAAEC,GAAI,aAAR,EAAsB;AAChCI,IAAAA,MAAM,EAAE,MADwB;AAEhCC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEP,sBAAgB;AAFT,KAFuB;AAMhCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AAN0B,GAAtB,CAAL,CAQJO,IARI,CAQCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARb,EASJC,KATI,CASEC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd,CATX,CAAP;AAUD,CAXM;AAaP,OAAO,MAAME,MAAM,GAAGb,IAAI,IAAI;AAC5B,SAAOJ,KAAK,CAAE,GAAEC,GAAI,SAAR,EAAkB;AAC5BI,IAAAA,MAAM,EAAE,MADoB;AAE5BC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEP,sBAAgB;AAFT,KAFmB;AAM5BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AANsB,GAAlB,CAAL,CAQJO,IARI,CAQCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARb,EASJC,KATI,CASEC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd,CATX,CAAP;AAUD,CAXM;AAaP,OAAO,MAAMG,MAAM,GAAGd,IAAI,IAAI;AAC5B,SAAOJ,KAAK,CAAE,GAAEC,GAAI,SAAR,EAAkB;AAC5BI,IAAAA,MAAM,EAAE,MADoB;AAE5BC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEP,sBAAgB;AAFT,KAFmB;AAM5BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AANsB,GAAlB,CAAL,CAQJO,IARI,CAQCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARb,EASJC,KATI,CASEC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd,CATX,CAAP;AAUD,CAXM;AAaP,OAAO,MAAMI,OAAO,GAAGC,IAAI,IAAI;AAC7BC,EAAAA,YAAY,CAAC,OAAD,CAAZ;AACAC,EAAAA,kBAAkB,CAAC,MAAD,CAAlB;AACAF,EAAAA,IAAI;AAEJ,SAAOpB,KAAK,CAAE,GAAEC,GAAI,UAAR,EAAmB;AAC7BI,IAAAA,MAAM,EAAE;AADqB,GAAnB,CAAL,CAGJM,IAHI,CAGCC,QAAQ,IAAII,OAAO,CAACO,GAAR,CAAY,oBAAZ,CAHb,EAIJT,KAJI,CAIEC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAJX,CAAP;AAKD,CAVM,C,CAYP;;AACA,OAAO,MAAMS,SAAS,GAAG,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACvC,aAAqB;AACnBxB,IAAAA,MAAM,CAACyB,GAAP,CAAWF,GAAX,EAAgBC,KAAhB,EAAuB;AACrBE,MAAAA,OAAO,EAAE;AADY,KAAvB;AAGD;AACF,CANM;AAQP,OAAO,MAAMP,YAAY,GAAGI,GAAG,IAAI;AACjC,aAAqB;AACnBvB,IAAAA,MAAM,CAAC2B,MAAP,CAAcJ,GAAd,EAAmB;AACjBG,MAAAA,OAAO,EAAE;AADQ,KAAnB;AAGD;AACF,CANM,C,CAQP;;AACA,OAAO,MAAME,SAAS,GAAGL,GAAG,IAAI;AAC9B,aAAqB;AACnB,WAAOvB,MAAM,CAAC6B,GAAP,CAAWN,GAAX,CAAP;AACD;AACF,CAJM,C,CAMP;;AACA,OAAO,MAAMO,eAAe,GAAG,CAACP,GAAD,EAAMC,KAAN,KAAgB;AAC7C,aAAqB;AACnBO,IAAAA,YAAY,CAACC,OAAb,CAAqBT,GAArB,EAA0BhB,IAAI,CAACC,SAAL,CAAegB,KAAf,CAA1B;AACD;AACF,CAJM;AAMP,OAAO,MAAMJ,kBAAkB,GAAGG,GAAG,IAAI;AACvC,aAAqB;AACnBQ,IAAAA,YAAY,CAACE,UAAb,CAAwBV,GAAxB;AACD;AACF,CAJM,C,CAMP;;AACA,OAAO,MAAMW,YAAY,GAAG,CAACC,IAAD,EAAOjB,IAAP,KAAgB;AAC1C;AACAI,EAAAA,SAAS,CAAC,OAAD,EAAUa,IAAI,CAACC,KAAf,CAAT,CAF0C,CAI1C;;AACAN,EAAAA,eAAe,CAAC,MAAD,EAASK,IAAI,CAACjC,IAAd,CAAf;AAEAgB,EAAAA,IAAI;AACL,CARM;AAUP,OAAO,MAAMmB,MAAM,GAAG,MAAM;AAC1B,aAAqB;AACnB;AACA,UAAMC,aAAa,GAAGV,SAAS,CAAC,OAAD,CAA/B,CAFmB,CAInB;;AACA,QAAIU,aAAJ,EAAmB;AACjB,UAAIP,YAAY,CAACQ,OAAb,CAAqB,MAArB,CAAJ,EAAkC;AAChC,eAAOhC,IAAI,CAACiC,KAAL,CAAWT,YAAY,CAACQ,OAAb,CAAqB,MAArB,CAAX,CAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAP;AACD;AACF;AACF;AACF,CAdM;AAgBP,OAAO,MAAME,UAAU,GAAG,CAACvC,IAAD,EAAOgB,IAAP,KAAgB;AACxC,aAAqB;AACnB,QAAIa,YAAY,CAACQ,OAAb,CAAqB,MAArB,CAAJ,EAAkC;AAChC,UAAIG,IAAI,GAAGnC,IAAI,CAACiC,KAAL,CAAWT,YAAY,CAACQ,OAAb,CAAqB,MAArB,CAAX,CAAX;AACAG,MAAAA,IAAI,GAAGxC,IAAP;AACA6B,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BzB,IAAI,CAACC,SAAL,CAAekC,IAAf,CAA7B;AACAxB,MAAAA,IAAI;AACL;AACF;AACF,CATM;AAWP,OAAO,MAAMyB,cAAc,GAAGC,KAAK,IAAI;AACrC,SAAO9C,KAAK,CAAE,GAAEC,GAAI,kBAAR,EAA2B;AACrCI,IAAAA,MAAM,EAAE,KAD6B;AAErCC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEP,sBAAgB;AAFT,KAF4B;AAMrCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeoC,KAAf;AAN+B,GAA3B,CAAL,CAQJnC,IARI,CAQCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARb,EASJC,KATI,CASEC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd,CATX,CAAP;AAUD,CAXM;AAaP,OAAO,MAAMgC,aAAa,GAAGC,SAAS,IAAI;AACxC,SAAOhD,KAAK,CAAE,GAAEC,GAAI,iBAAR,EAA0B;AACpCI,IAAAA,MAAM,EAAE,KAD4B;AAEpCC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEP,sBAAgB;AAFT,KAF2B;AAMpCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAesC,SAAf;AAN8B,GAA1B,CAAL,CAQJrC,IARI,CAQCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARb,EASJC,KATI,CASEC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd,CATX,CAAP;AAUD,CAXM;AAaP,OAAO,MAAMkC,eAAe,GAAG7C,IAAI,IAAI;AACrC,SAAOJ,KAAK,CAAE,GAAEC,GAAI,eAAR,EAAwB;AAClCI,IAAAA,MAAM,EAAE,MAD0B;AAElCC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEP,sBAAgB;AAFT,KAFyB;AAMlCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AAN4B,GAAxB,CAAL,CAQJO,IARI,CAQCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARb,EASJC,KATI,CASEC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd,CATX,CAAP;AAUD,CAXM","sourcesContent":["import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport cookie from 'js-cookie';\n\nexport const preSignup = user => {\n  return fetch(`${API}/pre-signup`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  })\n    .then(response => response.json())\n    .catch(error => console.error(error));\n};\n\nexport const signup = user => {\n  return fetch(`${API}/signup`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  })\n    .then(response => response.json())\n    .catch(error => console.error(error));\n};\n\nexport const signin = user => {\n  return fetch(`${API}/signin`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  })\n    .then(response => response.json())\n    .catch(error => console.error(error));\n};\n\nexport const signout = next => {\n  removeCookie('token');\n  removeLocalStorage('user');\n  next();\n\n  return fetch(`${API}/signout`, {\n    method: 'GET'\n  })\n    .then(response => console.log('Signout successful'))\n    .catch(error => console.error(error));\n};\n\n// set cookie\nexport const setCookie = (key, value) => {\n  if (process.browser) {\n    cookie.set(key, value, {\n      expires: 1\n    });\n  }\n};\n\nexport const removeCookie = key => {\n  if (process.browser) {\n    cookie.remove(key, {\n      expires: 1\n    });\n  }\n};\n\n// get cookie\nexport const getCookie = key => {\n  if (process.browser) {\n    return cookie.get(key);\n  }\n};\n\n// local storage\nexport const setLocalStorage = (key, value) => {\n  if (process.browser) {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n};\n\nexport const removeLocalStorage = key => {\n  if (process.browser) {\n    localStorage.removeItem(key);\n  }\n};\n\n// authenticate user by passing data to cookie and localstorage\nexport const authenticate = (data, next) => {\n  // set the cookie\n  setCookie('token', data.token);\n\n  // save data to localstorage\n  setLocalStorage('user', data.user);\n\n  next();\n};\n\nexport const isAuth = () => {\n  if (process.browser) {\n    // if there is a token in the cookie, then we have a user\n    const cookieChecked = getCookie('token');\n\n    // if there is a cookie, get the 'user' item from the local storage\n    if (cookieChecked) {\n      if (localStorage.getItem('user')) {\n        return JSON.parse(localStorage.getItem('user'));\n      } else {\n        return false;\n      }\n    }\n  }\n};\n\nexport const updateUser = (user, next) => {\n  if (process.browser) {\n    if (localStorage.getItem('user')) {\n      let auth = JSON.parse(localStorage.getItem('user'));\n      auth = user;\n      localStorage.setItem('user', JSON.stringify(auth));\n      next();\n    }\n  }\n};\n\nexport const forgotPassword = email => {\n  return fetch(`${API}/forgot-password`, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(email)\n  })\n    .then(response => response.json())\n    .catch(error => console.error(error));\n};\n\nexport const resetPassword = resetInfo => {\n  return fetch(`${API}/reset-password`, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(resetInfo)\n  })\n    .then(response => response.json())\n    .catch(error => console.error(error));\n};\n\nexport const loginWithGoogle = user => {\n  return fetch(`${API}/google-login`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  })\n    .then(response => response.json())\n    .catch(error => console.error(error));\n};\n"]},"metadata":{},"sourceType":"module"}